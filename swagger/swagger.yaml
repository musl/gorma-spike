consumes:
- application/json
definitions:
  AuthPayload:
    description: Auth Payload is used to auth users.
    example:
      email: nc
      password: Aut natus eos voluptatem.
    properties:
      email:
        description: email of a user
        example: nc
        minLength: 1
        type: string
      password:
        description: password of the user
        example: Aut natus eos voluptatem.
        type: string
    required:
    - email
    - password
    title: AuthPayload
    type: object
  PhotoPayload:
    description: Photo Payload is used to create photos.
    example:
      alt: 1x
      original: "6"
      published: false
      thumbnail: b
    properties:
      alt:
        description: name of a post
        example: 1x
        minLength: 1
        type: string
      original:
        description: URL to full-size image
        example: "6"
        minLength: 1
        type: string
      published:
        description: is the photo published
        example: false
        type: boolean
      thumbnail:
        description: URL to thumbnail-size image
        example: b
        minLength: 1
        type: string
    required:
    - alt
    - original
    - thumbnail
    - published
    title: PhotoPayload
    type: object
  PostPayload:
    description: Post Payload is used to create posts.
    example:
      body: ywn
      published: false
      title: 9sj
    properties:
      body:
        description: body of a post
        example: ywn
        minLength: 1
        type: string
      published:
        description: is the post published
        example: false
        type: boolean
      title:
        description: name of a post
        example: 9sj
        minLength: 1
        type: string
    required:
    - title
    - body
    - published
    title: PostPayload
    type: object
  UserPayload:
    description: User Payload is used to create users.
    example:
      email: ip1
      name: "88"
      password: Excepturi eos est dolore.
    properties:
      email:
        description: email of a user
        example: ip1
        minLength: 1
        type: string
      name:
        description: name of a user
        example: "88"
        minLength: 1
        type: string
      password:
        description: password of the user
        example: Excepturi eos est dolore.
        type: string
    required:
    - name
    - email
    - password
    title: UserPayload
    type: object
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error'
    type: object
  photo:
    description: photo media type (default view)
    example:
      alt: "6"
      created_at: 2015-06-05T09:50:50-07:00
      id: 3.296916e+18
      original: "0"
      published: true
      thumbnail: m
      updated_at: 2015-05-06T23:50:59-07:00
    properties:
      alt:
        description: name of a post
        example: "6"
        minLength: 1
        type: string
      created_at:
        example: 2015-06-05T09:50:50-07:00
        format: date-time
        type: string
      id:
        description: Unique Photo ID
        example: 3.296916e+18
        format: int64
        type: integer
      original:
        description: URL to full-size image
        example: "0"
        minLength: 1
        type: string
      published:
        description: is the photo published
        example: true
        type: boolean
      thumbnail:
        description: URL to thumbnail-size image
        example: m
        minLength: 1
        type: string
      updated_at:
        example: 2015-05-06T23:50:59-07:00
        format: date-time
        type: string
    required:
    - id
    - alt
    - original
    - thumbnail
    - published
    title: 'Mediatype identifier: application/vnd.hixio.goa.photo'
    type: object
  photoCollection:
    description: photoCollection is the media type for an array of photo (default
      view)
    example:
    - alt: "6"
      created_at: 2015-06-05T09:50:50-07:00
      id: 3.296916e+18
      original: "0"
      published: true
      thumbnail: m
      updated_at: 2015-05-06T23:50:59-07:00
    - alt: "6"
      created_at: 2015-06-05T09:50:50-07:00
      id: 3.296916e+18
      original: "0"
      published: true
      thumbnail: m
      updated_at: 2015-05-06T23:50:59-07:00
    - alt: "6"
      created_at: 2015-06-05T09:50:50-07:00
      id: 3.296916e+18
      original: "0"
      published: true
      thumbnail: m
      updated_at: 2015-05-06T23:50:59-07:00
    items:
      $ref: '#/definitions/photo'
    title: 'Mediatype identifier: application/vnd.hixio.goa.photo; type=collection'
    type: array
  post:
    description: post media type (default view)
    example:
      body: 8a
      created_at: 1997-09-15T08:19:24-07:00
      id: 3.3292912e+18
      published: true
      title: i
      updated_at: 2005-02-15T03:26:28-08:00
    properties:
      body:
        description: body of a post
        example: 8a
        minLength: 1
        type: string
      created_at:
        example: 1997-09-15T08:19:24-07:00
        format: date-time
        type: string
      id:
        description: Unique Post ID
        example: 3.3292912e+18
        format: int64
        type: integer
      published:
        description: is the post published
        example: true
        type: boolean
      title:
        description: name of a post
        example: i
        minLength: 1
        type: string
      updated_at:
        example: 2005-02-15T03:26:28-08:00
        format: date-time
        type: string
    required:
    - id
    - title
    - body
    - published
    title: 'Mediatype identifier: application/vnd.hixio.goa.post'
    type: object
  postCollection:
    description: postCollection is the media type for an array of post (default view)
    example:
    - body: 8a
      created_at: 1997-09-15T08:19:24-07:00
      id: 3.3292912e+18
      published: true
      title: i
      updated_at: 2005-02-15T03:26:28-08:00
    items:
      $ref: '#/definitions/post'
    title: 'Mediatype identifier: application/vnd.hixio.goa.post; type=collection'
    type: array
  user:
    description: user media type (default view)
    example:
      email: n0o
      id: 1.8750669e+18
      name: hb
    properties:
      email:
        description: email of a user
        example: n0o
        minLength: 1
        type: string
      id:
        description: Unique Post ID
        example: 1.8750669e+18
        format: int64
        type: integer
      name:
        description: name of a user
        example: hb
        minLength: 1
        type: string
    required:
    - id
    - name
    - email
    title: 'Mediatype identifier: application/vnd.hixio.goa.user'
    type: object
  userCollection:
    description: userCollection is the media type for an array of user (default view)
    example:
    - email: n0o
      id: 1.8750669e+18
      name: hb
    items:
      $ref: '#/definitions/user'
    title: 'Mediatype identifier: application/vnd.hixio.goa.user; type=collection'
    type: array
host: 127.0.0.1:8080
info:
  description: Mike Hix's Blog Service
  version: ""
paths:
  /{filepath}:
    get:
      operationId: static#/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      summary: Download static/build
  /api/v1/auth:
    post:
      description: Creates a valid JWT
      operationId: auth#jwt
      parameters:
      - description: Auth Payload is used to auth users.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AuthPayload'
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: Generated JWT
              type: string
        "401":
          description: Unauthorized
      summary: jwt auth
      tags:
      - auth
  /api/v1/photos:
    get:
      description: lists all published photos
      operationId: photo#list
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/photoCollection'
      summary: list photo
      tags:
      - photo
    post:
      description: |-
        creates a photo

        Required security scopes:
          * `api:access`
      operationId: photo#create
      parameters:
      - description: Photo Payload is used to create photos.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/PhotoPayload'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/photo'
        "500":
          description: Internal Server Error
      security:
      - jwt:
        - api:access
      summary: create photo
      tags:
      - photo
  /api/v1/photos/{id}:
    delete:
      description: |-
        deletes a photo

        Required security scopes:
          * `api:access`
      operationId: photo#delete
      parameters:
      - description: Unique Photo ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - jwt:
        - api:access
      summary: delete photo
      tags:
      - photo
    get:
      description: shows a photo
      operationId: photo#show
      parameters:
      - description: Unique Photo ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/photo'
        "404":
          description: Not Found
      summary: show photo
      tags:
      - photo
  /api/v1/posts:
    get:
      description: lists all publisged posts
      operationId: post#list
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postCollection'
      summary: list post
      tags:
      - post
    post:
      description: |-
        creates a post

        Required security scopes:
          * `api:access`
      operationId: post#create
      parameters:
      - description: Post Payload is used to create posts.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/PostPayload'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/post'
        "500":
          description: Internal Server Error
      security:
      - jwt:
        - api:access
      summary: create post
      tags:
      - post
  /api/v1/posts/{id}:
    delete:
      description: |-
        deletes a post

        Required security scopes:
          * `api:access`
      operationId: post#delete
      parameters:
      - description: Unique Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - jwt:
        - api:access
      summary: delete post
      tags:
      - post
    get:
      description: shows a post
      operationId: post#show
      parameters:
      - description: Unique Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post'
        "404":
          description: Not Found
      summary: show post
      tags:
      - post
  /api/v1/status:
    get:
      description: A basic status-check endpoint
      operationId: status#check
      responses:
        "200":
          description: OK
      summary: check status
      tags:
      - status
  /api/v1/users:
    get:
      description: |-
        lists all users

        Required security scopes:
          * `api:access`
      operationId: user#list
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userCollection'
      security:
      - jwt:
        - api:access
      summary: list user
      tags:
      - user
    post:
      description: |-
        creates a user

        Required security scopes:
          * `api:access`
      operationId: user#create
      parameters:
      - description: User Payload is used to create users.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserPayload'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user'
        "500":
          description: Internal Server Error
      security:
      - jwt:
        - api:access
      summary: create user
      tags:
      - user
  /api/v1/users/{id}:
    delete:
      description: |-
        deletes a user

        Required security scopes:
          * `api:access`
      operationId: user#delete
      parameters:
      - description: Unique Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - jwt:
        - api:access
      summary: delete user
      tags:
      - user
    get:
      description: |-
        shows a user

        Required security scopes:
          * `api:access`
      operationId: user#show
      parameters:
      - description: Unique Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user'
        "404":
          description: Not Found
      security:
      - jwt:
        - api:access
      summary: show user
      tags:
      - user
  /swagger-ui/{filepath}:
    get:
      operationId: swagger#/swagger-ui/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      summary: Download swagger-ui/dist/
  /swagger.json:
    get:
      operationId: swagger#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      summary: Download swagger/swagger.json
produces:
- application/json
responses:
  NoContent:
    description: No Content
  NotFound:
    description: Not Found
  OK:
    description: OK
    schema:
      $ref: '#/definitions/photo'
  Unauthorized:
    description: Unauthorized
securityDefinitions:
  jwt:
    description: |2-


      **Security Scopes**:
        * `api:access`: API access
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
